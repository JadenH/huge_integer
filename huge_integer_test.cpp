#include "huge_integer.h"
#include <string>
#include <iostream>

using namespace std;

// Main - the application entry point
int main ()
{
  huge_integer a("123");
  huge_integer b("456");

  huge_integer c("11111111111111111111");
  huge_integer d("55555555555555555555");

  huge_integer e("8862587804866482810291065412713909627995560428600527197024182811990896997718819095988191670475510523");
  huge_integer f("2");

  huge_integer g("605946960564046419850684797966551690880658342632958142796030689758672363689249571292759941120254698347279094505247189792435988566618636631609746661444517343271828903052798739582746529933638591733747363865383310656720832268794916284102351863680941884042549921792579115192451605071885634318888950455419691575993018157962871374246926607449768238182344112627063765449033037314464595689314488072619191179256727854061806666813021192332011257149295324568954161541361757298577168221498648099915581037332527817373433505381559352188147175276251048473844300822858999565767999175502593009917585247935158438509098642806033699243584504130478546031378729564085783943830660195329336492539026967965447657914728266532279673147730684181493120687186847326511807581597528503435807207450065186885694344402628715384167311328410413870930675260529861536436048606275450676903344827402012252249292139931335329747485188218227293401594251530634712743299471416729135237936673447151909454273476314012643788283574033936164503991249518670450124138320212523201774661175533135940834537646031724040842445052541006196508315141926843380019854507514749807749925434186582318787662425913525790986847559540423261533304864174033358780279774757793590070432464875014494721117927952011002863831808387812458433229142963599735783322377568187979732716822691017678468551221881392989385953406734386290604061919146892799873598694489112735557002642927969249280741637189265573068365828943277388988606189768834009874942711480518110342711514262260581478513775887551476515876137231785761294319934741173592496494268176573651615910060134547823242402855806426467227065751718713692175341118430306157415259265814443248970246525511492991856227939651167002384391551643053615622722645107110508397341571134360888991066206616790528840690593465269272315995897330766584779805504788551646081196784403715695302718044120170393376482968336311072173845027133776772990490169113666633981791957648853474906428420923470472859655520220551502685161518578268536850064372451525300289237451958028421733602344667008124596734021799716236680643991871823144205537337598168144340506856495292956903215669699073007219788145740450967555909395221177840066799874594762306029302069950992261503893115287008398514261942257834266091493215037879380694483381277342738201683667939151590669502616821651700244622278967209318976885632885092210794469078365161928289651542539622108534247051331274174741809066042614719868808684601339439260466674088563289948334732458579005338156857329647467378627035554903379584375169386086098353714256809833808047132478129502321722115507053");
  huge_integer h("302973480282023209925342398983275845440329171316479071398015344879336181844624785646379970560127349173639547252623594896217994283309318315804873330722258671635914451526399369791373264966819295866873681932691655328360416134397458142051175931840470942021274960896289557596225802535942817159444475227709845787996509078981435687123463303724884119091172056313531882724516518657232297844657244036309595589628363927030903333406510596166005628574647662284477080770680878649288584110749324049957790518666263908686716752690779676094073587638125524236922150411429499782883999587751296504958792623967579219254549321403016849621792252065239273015689364782042891971915330097664668246269513483982723828957364133266139836573865342090746560343593423663255903790798764251717903603725032593442847172201314357692083655664205206935465337630264930768218024303137725338451672413701006126124646069965667664873742594109113646700797125765317356371649735708364567618968336723575954727136738157006321894141787016968082251995624759335225062069160106261600887330587766567970417268823015862020421222526270503098254157570963421690009927253757374903874962717093291159393831212956762895493423779770211630766652432087016679390139887378896795035216232437507247360558963976005501431915904193906229216614571481799867891661188784093989866358411345508839234275610940696494692976703367193145302030959573446399936799347244556367778501321463984624640370818594632786534182914471638694494303094884417004937471355740259055171355757131130290739256887943775738257938068615892880647159967370586796248247134088286825807955030067273911621201427903213233613532875859356846087670559215153078707629632907221624485123262755746495928113969825583501192195775821526807811361322553555254198670785567180444495533103308395264420345296732634636157997948665383292389902752394275823040598392201857847651359022060085196688241484168155536086922513566888386495245084556833316990895978824426737453214210461735236429827760110275751342580759289134268425032186225762650144618725979014210866801172333504062298367010899858118340321995935911572102768668799084072170253428247646478451607834849536503609894072870225483777954697610588920033399937297381153014651034975496130751946557643504199257130971128917133045746607518939690347241690638671369100841833969575795334751308410825850122311139483604659488442816442546105397234539182580964144825771269811054267123525665637087370904533021307359934404342300669719630233337044281644974167366229289502669078428664823733689313517777451689792187584693043049176857128404916904023566239064751160861057753526");

  cout << a.get_value() << endl;  // X should not have changed
  cout << b.get_value() << endl;  // Y should not have changed
  cout << (a + b * a).get_value() << endl;
  cout << (a - b).get_value() << endl; // 0
  cout << (b - a).get_value() << endl; // 333

  cout << (g - e - e - e - e).get_value() << endl; // 605946960564046419850684797966551690880658342632958142796030689758672363689249571292759941120254698347279094505247189792435988566618636631609746661444517343271828903052798739582746529933638591733747363865383310656720832268794916284102351863680941884042549921792579115192451605071885634318888950455419691575993018157962871374246926607449768238182344112627063765449033037314464595689314488072619191179256727854061806666813021192332011257149295324568954161541361757298577168221498648099915581037332527817373433505381559352188147175276251048473844300822858999565767999175502593009917585247935158438509098642806033699243584504130478546031378729564085783943830660195329336492539026967965447657914728266532279673147730684181493120687186847326511807581597528503435807207450065186885694344402628715384167311328410413870930675260529861536436048606275450676903344827402012252249292139931335329747485188218227293401594251530634712743299471416729135237936673447151909454273476314012643788283574033936164503991249518670450124138320212523201774661175533135940834537646031724040842445052541006196508315141926843380019854507514749807749925434186582318787662425913525790986847559540423261533304864174033358780279774757793590070432464875014494721117927952011002863831808387812458433229142963599735783322377568187979732716822691017678468551221881392989385953406734386290604061919146892799873598694489112735557002642927969249280741637189265573068365828943277388988606189768834009874942711480518110342711514262260581478513775887551476515876137231785761294319934741173592496494268176573651615910060134547823242402855806426467227065751718713692175341118430306157415259265814443248970246525511492991856227939651167002384391551643053615622722645107110508397341571134360888991066206616790528840690593465269272315995897330766584779805504788551646081196784403715695302718044120170393376482968336311072173845027133776772990490169113666633981791957648853474906428420923470472859655520220551502685161518578268536850064372451525300289237451958028421733602344667008124596734021799716236680643991871823144205537337598168144340506856495292956903215669699073007219788145740450967555909395221177840066799874594762306029302069950992261503893115287008398514261942257834266091493215037879380694483381277342738201683667939151590669502616821651700244622278967209318976885632885092210794469078365161928289651542539622108534247051331274174741809066042614719868808684601339439260466674088563289948334732458579005302706506110181536137462773904047741072392927671683989565617525561870220056257201745549555040213464961
  cout << (c - d).get_value() << endl; // 0
  cout << (d - c).get_value() << endl; // 44444444444444444444
  cout << (c + d).get_value() << endl; // 66666666666666666666

  cout << (b / b).get_value() << endl; // 1
  cout << (d / c).get_value() << endl; // 5
  cout << (e / f).get_value() << endl; // 4431293902433241405145532706356954813997780214300263598512091405995448498859409547994095835237755261
  cout << (g / h).get_value() << endl; // 2

  cout << (g % h).get_value() << endl; // 1
  cout << (b % a).get_value() << endl; // 87

  // Inform the shell that the program terminated without errors by
  // returning a 0.  (We don't make use of this error code.)
  return 0;
}
